<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="sec3-chap3" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Shor's Algorithm</title>
  <subsection xml:id="subsec-Building-Up-to-the-Algorithm">
    <title>Building Up to the Algorithm</title>
  <p> In the field of cryptography, quantum computers could be used to improve the security of our information systems. However, quantum computations can also be used to break through our modern crypto-systems much faster than is possible through classical computing. One method through which quantum computation could be used to break through our modern cybersecurity is with an algorithm created by American mathematician Peter Shor in 1994.  </p>
  <p> The security behind our modern cryptographic methods lies in the fact that it is very computationally difficult to find the prime factors of large numbers. It takes years of computing time on a classical computer to find the factors of numbers with hundreds of digits. The algorithm designed by Peter Shor takes advantage of quantum concepts to find the prime factors of large numbers much quicker. If a powerful enough quantum computer is ever built it could be used to break most modern encryptions jarringly quickly. Before describing the algorithm, we must first define some terms. </p>
<p><alert>Prime Numbers:</alert> A number is prime if the only positive integers that divide it are itself and the number one </p>
<p><alert> Coprime Numbers:</alert> Two numbers are coprime (also known as relatively prime or mutually prime) if the only positive integer that is a divisor of both of them is the number one. In other words, two numbers are coprime if their greatest common divisor is one and they share no prime factors </p>
<p><alert> Period of a function:</alert> Suppose <m>\textbf{x}</m> and <m>\textbf{y}</m> are two binary strings. The period of a function <m>f</m> would be a binary string <m>\textbf{c}</m> such that </p>
<me> f(\textbf{x}) = f(\textbf{y}) \text{ if and only if } \textbf{x} = \textbf{y} \oplus \textbf{c} </me>  
<p> where <m>\textbf{x},\textbf{y},\textbf{c} \in \{0,1\}^n</m> and <m>\oplus</m> represents the XOR operation. </p> 
<p><alert> Congruence Relation:</alert> The congruence relation comes from the field of modular arithmetic. This relation deals with numbers that have the same remained when divided by a specific value, which is called a <term>modulus</term><idx><h>Modulus</h></idx>.</p>
<me> a \equiv b \text{ mod } m</me> 
<p> This equation reads "<m>a</m> is congruent to <m>b</m> modulo <m>m</m>." Congruence relations have the following properties:  </p>
<me> \begin{split} &amp; \text{Reflexive:  } a \equiv a \text{ mod } m
  \\&amp; \text{Symmetric:  } \text{if } a \equiv b \text{ mod } m \text{  then  } b \equiv a \text{ mod } m
  \\&amp; \text{Reflexive:  }  \text{if } a \equiv b \text{ mod } m \text{  and  } b \equiv c \text{ mod } m \text{  then  } a \equiv c \text{ mod } m  \end{split}</me>
<p> Suppose <m> a \equiv b \text{ mod } m </m> and <m> c \equiv d \text{ mod } m </m>. Congruence relations have the following operations defined: </p> 
<me> \begin{split} &amp; \text{Addition: }  a + c \equiv b + d \text{ mod } m
  \\&amp; \text{Subtraction:  } a - c \equiv b - d \text{ mod } m
  \\&amp; \text{Multiplication:  } ac \equiv bd \text{ mod } m
  \\&amp; \text{Exponentiation:  } a^n \equiv b^n \text{ mod } m \ \ \ \ \ \ \ \ \text{   }\end{split} </me>
</subsection>
<subsection xml:id="subsec-An-Example">
  <title>An Example</title>
  <p> We will start the discussion of this algorithm with an example. Suppose we have two prime numbers, <m>3, 7.</m> We can multiply them togehter to get <m>(3\times 7 = ) 21</m> which a positive number and the result of two prime numbers. Now, think about this </p> 
<me> p \times 7 = 21 </me> 
<p> where <m>p</m> is either prime or the product of primes. We can calculate this number fairly easily. However, if you have </p>
<me> p \times q = 315 </me> 
<p> where <m>p</m> and <m>q</m> are either prime or the product of primes. We can still calculate this fairly easily and find that 315 actually has more than two factors </p> 
<me> 315 = 3 \times 3 \times 5 \times 7 = 3^2 \times 5 \times 7</me>
<p> Instead of trying to solve for <m>p</m> and <m>q</m>, it makes more sense to solve for <m>p_1,p_2,\ldots,p_n</m> and <m>r_1,r_2,\ldots,r_n</m> where each <m>p_i</m> is a prime number and each <m>r_i</m> is an exponent that represents how many times <m>p_i</m> appears as a factor. This means we want to express the number we are looking to factor as </p> 
<me>p_1^{r_1} \times p_2^{r_2} \times \ldots \times p_n^{r_n}</me>

</subsection>

</section>